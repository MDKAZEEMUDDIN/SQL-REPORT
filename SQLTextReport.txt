18/10/22
SQL server:It is a relational database management system

DBMS:It is a dataManagment system it a software used to mannage the database
constraints:
null:-A null value cannot be stored in the column
unique:- the value in the column is diffrent
check :-All the values in the column should be satisfy with the condition
default :- It consist of set of default values for the column when no value is specified
Index : it is used to retriving the data from database
  
Creating a table :-
CREATE TABLE Employeedetails3
(
EmpId int,
EmpName varchar(20),
EmpphoneNumber int,
EmpSalary int,
Empemail varchar(20),
EmpAddres varchar(50),
Empcity varchar(15),
Empdist varchar(20),
Empcountry varchar(15)
PRIMARY KEY(EmpId)
);
INSERT INTO Employeedetails3 (EmpId,EmpName,EmpphoneNumber,EmpSalary,Empemail,EmpAddres,Empcity,Empdist,Empcountry)
 VALUES('1','sameer','8088692','20000','sameer1@gmail.com','santrashwadi','Kalabrugi','kalaburgi','INDIA');
INSERT INTO Employeedetails3 VALUES('2','Ramesh','6935478','15000','Ramesh2@gamil.com','Vijayanagara','Bangalore','Bangalore','INDIA');
SELECT DISTINCT Empcity from Employeedetails3

SELECT * FROM Employeedetails3

Display details:-

->select * from TableName
->DROP TABLE:-Drop table tablename
->drop database:-drop  database tablename
->ADDtable:-Alter table tablename ADD xyzname varchar();
->drop column:-Alter table tablename drop column xyzname;
->select DISTINCT CITYNAME FROM TABLENAME
->Truncate :- delete the information from the table:-Truncate  table tablename
->Insert :insert the values into table :-Insert into tableName values();

19/10/22
->What is a NULL Value?
A field with a NULL value is a field with no value
If a field in a table is optional it is possible to insert a new record or update a record without adding a value to this field 
Then, the field will be saved with a NULL value.

->IS NULL Syntax:-
SELECT columnnames
FROM tablename
WHERE columnname IS NULL;

->IS NOT NULL Syntax
SELECT columnnames
FROM tablename
WHERE columnname IS NOT NULL;

->Constraints:- The rule given  for the column for validation
*)Unique :-It is used to avoid the duplicate values into the coloum
->CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(25) NOT NULL,
    FirstName varchar(25),
    Age int,
    CONSTRAINT UC_Person UNIQUE (ID,LastName)
);
*)Not null:-It is used to avoid null values

->ALTER TABLE Persons
ALTER COLUMN Age int NOT NULL;

*)check :-It is a extra validation with a condition 
->CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(20) NOT NULL,
    FirstName varchar(250),
    Age int,
    City varchar(10),
    CONSTRAINT CHK_Person CHECK (Age>=18 AND City='')
);
if the condtion  is satisfied the value is accepted else  it will be rejected 
*)Primary key:-It is a constraints  which is used to identyfy  a records uniquely from the table
->CREATE TABLE Persons (
    ID int NOT NULL PRIMARY KEY,
    LastName varchar(20) NOT NULL,
    FirstName varchar(20),
    Age int
);
->forenkey:-
*) FOREIGN KEY is a field in one table that refers to the PRIMARY KEY in another table.

->The table with the foreign key is called the child table and the table with the primary key is called the referenced or parent table.

20/10/22

JOINS:-

A JOIN clause is used to combine rows from two or more tables, based on a related column between them.

Diffrent types of Joins:-
INNER JOIN: Returns records that have matching values in both tables
syntax:-SELECT column_name(s)
FROM table1
INNER JOIN table2
ON table1.column_name = table2.column_name;

LEFT OUTER JOIN: Returns all records from the left table, and the matched records from the right table
syntax:-
SELECT column_name(s)
FROM table1
LEFT JOIN table2
ON table1.column_name = table2.column_name;

RIGHT OUTER JOIN: Returns all records from the right table, and the matched records from the left table
syntax:-
SELECT column_name(s)
FROM table1
RIGHT JOIN table2
ON table1.column_name = table2.column_name;

FULL OUTER JOIN: Returns all records when there is a match in either left or right table
syntax:-
SELECT column_name(s)
FROM table1
FULL OUTER JOIN table2
ON table1.column_name = table2.column_name
WHERE condition;

26/10/22
Inner joins creating table 3 table using foren key 

create table Dept (
   DeptID int primary key,
   Name varchar(100),
)
 
create table Employees (
   EmployeeID int primary key,
   Name varchar(100),
   DeptID int null,
   CONSTRAINT FK_Employees_DeptID   FOREIGN KEY (DeptID) REFERENCES Dept (DeptID)
);
create table DeptManager (
   DeptID int ,
   ManagerID int,
   primary key (DeptID, ManagerID),
   CONSTRAINT FK_DeptManager_DeptID   FOREIGN KEY (DeptID) REFERENCES Dept (DeptID),
   CONSTRAINT FK_DeptManager_ManagerID   FOREIGN KEY (ManagerID) REFERENCES Employees (EmployeeID)
)
select * from Dept
select * from Employees
select * from DeptManager
 
insert into Dept Values(1,'Excutive')
insert into Dept Values(2,'HR')
 insert into Employees Values(1,'Kevin ',1)
insert into Employees Values(2,'Akshay',1)
insert into Employees Values(3,'Sandeep',2)
insert into Employees Values(4,'Swati',2)
insert into Employees Values(5,'Sunil',2)
 insert into DeptManager Values(1,1)
insert into DeptManager Values(2,2)
Select employee.EmployeeID,employee.Name, dept.Name, manager.EmployeeID as ManagerID, manager.Name As Manager
from Employees employee
left join Dept dept
on (employee.DeptID =dept.DeptID)
left join DeptManager deptManager
on (employee.DeptID = deptManager.DeptID)
left join Employees Manager
On ( Manager.EmployeeID=deptManager.ManagerID)

And 3:00pm session taken by @Bhushan chandrashekar about Right joins ,self join,inner join,cross join

27/10/22
Today i gown through store procedure Insert ,update ,delete
create  table UserDetails
(
User_Id int primary key identity(1,1) not null,
User_Name varchar(20) not null,
User_age int not null

);
insert into UserDetails values('Amar',23)
insert into UserDetails values('kiran',28)
insert into UserDetails values('pavan',25)
insert into UserDetails values('Manoj',22)


create table EmployeDetail
(
Emp1_id int primary key not null,
Emp1_name varchar(20) not null,
Emp1_age int not null
)
insert into EmployeDetail values(1,'sameer',36)
insert into EmployeDetail values(2,'Akash',45)
insert into EmployeDetail values(3,'prabhu',30)
insert into EmployeDetail values(4,'kiran',28)
insert into EmployeDetail values(5,'aveez',22)
select * from UserDetails
select * from EmployeDetail
create table Employedetail2
(
Emp2_id int primary key not null,
Emp2_name varchar(20) not null,
Emp2_age int not null ,
userid int foreign key references UserDetails(User_Id),
Empid int foreign key references EmployeDetail(Emp1_id)
)
insert into Employedetail2 values(1,'samreen',20,1,1)
insert into Employedetail2 values(2,'kk',25,2,2)
insert into Employedetail2 values(3,'hitesh',18,3,3)
insert into Employedetail2 values(4,'sam',15,4,4)

select * from UserDetails
select * from EmployeDetail
select * from Employedetail2

CREATE PROCEDURE SPINSERTDATA
 (
 @U_NAME VARCHAR(20),
 @U_AGE INT
 )
 AS
   BEGIN
     INSERT INTO UserDetails(User_Name,User_age) VALUES(@U_NAME,@U_AGE);
   END
   

  CREATE PROCEDURE SPUPDATE
  (
  @U_ID INT,
  @U_NAME VARCHAR(20),
  @U_AGE INT
  )
  AS
  BEGIN
  SET NOCOUNT ON;
  UPDATE UserDetails 
  SET User_Name=@U_NAME,
  User_age=@U_AGE
  where User_Id=@U_ID
  end
  CREATE PROCEDURE SPDELETE
  (
  @id int
  )
  AS
  BEGIN
  DELETE FROM UserDetails
  where User_Id=@id
  end
  -----creating view -----------------
  CREATE VIEW RetriveUserDetails
  AS
  
   select userdetails.USER_ID,userdetails.User_Name,User_age,Employedetail2.Emp2_id
   from Employedetail2
   inner join UserDetails on Employedetail2.userid=UserDetails.User_Id
   inner join EmployeDetail on Employedetail2.EmpId=EmployeDetail.Emp1_id

And session taken by Rajiv Ravichandran at 3.30pm  about store procedure and session taken by @Bhushan Chandrashekhar Kolapkar about view procedure at 5.30pm 
   

 






